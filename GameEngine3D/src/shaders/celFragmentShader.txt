#version 130

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;


out vec4 out_Color;


uniform sampler2D modelTexture;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

const float levels = 3.0;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDot1 = dot(unitNormal,unitLightVector);
	float minAmbientLight = 0.50;
	float maxBrightness = 1;
	float brightness = max(nDot1,minAmbientLight);
	brightness = max(nDot1 * maxBrightness,0.3);
	
	vec3 diffuse = brightness * lightColor;
	float level = floor(brightness * levels);
	brightness = level / levels;
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	level = floor(dampedFactor * levels);
	dampedFactor = level / levels;
	
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	
	vec4 textureColor = texture(modelTexture,pass_textureCoords);
	if (textureColor.a < 0.5) {
		discard;
	}
	
	out_Color = vec4(diffuse,1.0) * textureColor + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
	
}
